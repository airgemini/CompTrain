@page "/wod/agenda"
@page "/wod/agenda/{datestart:datetime}"
@attribute [Authorize(Roles = "Admin,Owner")]
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@using CompTrain.Shared.Models.Wod


<PageTitle Title="Programming Agenda" Description="La tua programmazione sottocontrollo" />
@if (rawAgendaResponses != null && rawAgendaResponses.Count > 0)
{
<div class="row">
    <div class="col-6">
        <nav aria-label="Agenda Navigation">
            <ul class="pagination justify-content-end">
                <li class="page-item">
                    <a class="page-link" href="/wod/agenda/@datestart.AddDays(-15).ToString("yyyy-MM-dd")" tabindex="-1"><i class="fas fa-step-backward"></i></a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="/wod/agenda/@datestart.AddDays(15).ToString("yyyy-MM-dd")"><i class="fas fa-step-forward"></i></a>
                </li>
            </ul>
        </nav>
    </div>
    <div class="col-6">
        <div class="btn-group btn-group-toggle" data-toggle="buttons">
            <label class="btn btn-secondary active">
                <input type="radio" name="options" id="option1" checked @onclick="@((args) => Show("all"))">All
            </label>
            <label class="btn btn-secondary">
                <input type="radio" name="options" id="option2" @onclick="@((args) => Show("wod"))">Wod
            </label>
            <label class="btn btn-secondary">
                <input type="radio" name="options" id="option3" @onclick="@((args) => Show("no-wod"))">No wod
            </label>
        </div>
    </div>
</div>
}
@if (agendaResponses != null)
{
    @foreach (var agenda in agendaResponses)
    {
        <div class="my-3 p-3 bg-white rounded shadow-sm">
            <h5 class="border-bottom border-gray pb-2 mb-0">@agenda.Date.ToString("dddd, dd MMMM")</h5>

            <div class="media text-muted pt-3">
                <div class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">

                    @if (agenda.Wod != null)
                    {
                        <h6><strong class="text-gray-dark">@agenda.Wod.Name</strong></h6>
                        <div class="d-flex justify-content-between align-items-center w-100">
                            <p>@agenda.Wod.Description</p>
                            <div class="btn-group" role="group" aria-label="Agenda Button Group">
                                <a href="/wod/add/@agenda.Date.ToString("yyyy-MM-dd")" class="btn btn-secondary"><i class="far fa-calendar-check"></i></a>
                                <button @onclick="@((args) => DeleteWod(agenda.Wod.Id))" class="btn btn-outline-danger"><i class="far fa-trash-alt"></i></button>
                            </div>
                        </div>

                    }
                    else if (agenda.IsRest)
                    {
                        <h6><strong class="text-success">Rest day</strong></h6>
                        <div class="d-flex justify-content-between align-items-center w-100">
                            <p>Oggi ci si riposa ma...se vuoi far allenare i tuoi atleti puoi!</p>
                            <a href="/wod/add/@agenda.Date.ToString("yyyy-MM-dd")" class="btn btn-secondary"><i class="fas fa-calendar-plus"></i></a>
                        </div>

                    }
                    else
                    {
                        <h6><strong class="text-danger">Programming day</strong></h6>
                        <div class="d-flex justify-content-between align-items-center w-100">
                            <p>Al lavoro! Inserisci il programma da fare oggi</p>
                            <a href="/wod/add/@agenda.Date.ToString("yyyy-MM-dd")" class="btn btn-secondary"><i class="fas fa-calendar-plus"></i></a>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}
@code {
    [Parameter]
    public DateTime datestart { get; set; } = DateTime.Now;

    List<AgendaResponse> agendaResponses = null;
    List<AgendaResponse> rawAgendaResponses = null;

    protected async override Task OnInitializedAsync()
    {
        await LoadDays();
    }

    protected async override Task OnParametersSetAsync()
    {
        await LoadDays();
    }

    private async Task LoadDays()
    {

        if (datestart == DateTime.MinValue)
            datestart = DateTime.Now;

        agendaResponses = rawAgendaResponses = await Http.GetFromJsonAsync<List<AgendaResponse>>($"api/wods/agenda/{datestart.ToString("yyyy-MM-dd")}");

    }

    private async Task DeleteWod(int WodId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler eliminare il wod?");
        if (!confirmed)
            return;

        bool check = await Http.GetFromJsonAsync<bool>($"api/wods/delete/{WodId}");
        if (check)
        {
            agendaResponses.FirstOrDefault(x => x.Wod.Id == WodId).Wod = null;
        }
    }


    private void Show(string Type)
    {
        switch (Type)
        {
            default:
                agendaResponses = rawAgendaResponses;
                break;

            case "wod":
                agendaResponses = rawAgendaResponses.FindAll(x => x.Wod != null);
                break;

            case "no-wod":
                agendaResponses = rawAgendaResponses.FindAll(x => x.Wod == null);
                break;
        }

    }
}
